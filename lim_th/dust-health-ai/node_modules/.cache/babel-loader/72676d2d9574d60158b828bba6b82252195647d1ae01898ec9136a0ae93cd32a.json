{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bigdata-project-AI--main\\\\lim_th\\\\dust-health-ai\\\\src\\\\pages\\\\TodayDust.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/todaydust.css';\nimport cityMapping from '../region_mapping/cityMapping.js';\n\n// 미세먼지 데이터를 가져오는 컴포넌트\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodayDust = () => {\n  _s();\n  const [dustData, setDustData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&pageNo=1&numOfRows=1&returnType=json&serviceKey=YOUR_API_KEY');\n        const data = await response.json();\n        setDustData(data.response.body.items[0]);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 도시명과 미세먼지 농도를 추출\n  const cities = Object.entries(dustData).filter(([key]) => key !== 'dataTime' && key !== 'dataGubun' && key !== 'itemCode');\n\n  // 지도 위에 미세먼지 농도를 표시하는 방식\n  const renderMarkers = () => {\n    return cities.map(([city, value]) => {\n      // 도시의 좌표를 가져오는 방법 (예: cityMapping에서 좌표를 매핑)\n      const cityCoordinates = cityMapping[city];\n      if (cityCoordinates) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"marker\",\n          style: {\n            position: 'absolute',\n            top: `${cityCoordinates.y}px`,\n            // y좌표\n            left: `${cityCoordinates.x}px`,\n            // x좌표\n            backgroundColor: getMarkerColor(value),\n            width: '20px',\n            height: '20px',\n            borderRadius: '50%'\n          },\n          title: `${cityMapping[city]}: ${value} μg/m³`\n        }, city, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this);\n      }\n      return null;\n    });\n  };\n\n  // 미세먼지 농도에 따른 마커 색상 결정\n  const getMarkerColor = value => {\n    if (value > 100) {\n      return 'red';\n    } else if (value > 50) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dust-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"dust-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TodayDust \\uD398\\uC774\\uC9C0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"dust-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC624\\uB298\\uC758 \\uBBF8\\uC138\\uBA3C\\uC9C0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        style: {\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/path-to-your-map-image.jpg\",\n          alt: \"Map of Korea\",\n          style: {\n            width: '100%',\n            height: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), renderMarkers()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uCE21\\uC815\\uC77C\\uC2DC: \", dustData.dataTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC0AC\\uC6A9\\uC790 \\uB9DE\\uCDA4 \\uBD84\\uC11D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/analyze\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"AI-button\",\n          children: \"AI \\uBD84\\uC11D \\uD398\\uC774\\uC9C0 \\uC774\\uB3D9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/main\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"main-button\",\n        children: \"Main\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(TodayDust, \"K+Gs8WVuwoFb+4oEtPvW/SMHkbA=\");\n_c = TodayDust;\nexport default TodayDust;\nvar _c;\n$RefreshReg$(_c, \"TodayDust\");","map":{"version":3,"names":["React","useEffect","useState","Link","cityMapping","jsxDEV","_jsxDEV","TodayDust","_s","dustData","setDustData","loading","setLoading","fetchData","response","fetch","data","json","body","items","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","cities","Object","entries","filter","key","renderMarkers","map","city","value","cityCoordinates","className","style","position","top","y","left","x","backgroundColor","getMarkerColor","width","height","borderRadius","title","src","alt","dataTime","to","_c","$RefreshReg$"],"sources":["C:/Bigdata-project-AI--main/lim_th/dust-health-ai/src/pages/TodayDust.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/todaydust.css';\nimport cityMapping from '../region_mapping/cityMapping.js';\n\n// 미세먼지 데이터를 가져오는 컴포넌트\nconst TodayDust = () => {\n  const [dustData, setDustData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\n          'https://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?itemCode=PM10&dataGubun=HOUR&pageNo=1&numOfRows=1&returnType=json&serviceKey=YOUR_API_KEY'\n        );\n        const data = await response.json();\n        setDustData(data.response.body.items[0]);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  // 도시명과 미세먼지 농도를 추출\n  const cities = Object.entries(dustData).filter(\n    ([key]) => key !== 'dataTime' && key !== 'dataGubun' && key !== 'itemCode'\n  );\n\n  // 지도 위에 미세먼지 농도를 표시하는 방식\n  const renderMarkers = () => {\n    return cities.map(([city, value]) => {\n      // 도시의 좌표를 가져오는 방법 (예: cityMapping에서 좌표를 매핑)\n      const cityCoordinates = cityMapping[city];\n\n      if (cityCoordinates) {\n        return (\n          <div\n            key={city}\n            className=\"marker\"\n            style={{\n              position: 'absolute',\n              top: `${cityCoordinates.y}px`, // y좌표\n              left: `${cityCoordinates.x}px`, // x좌표\n              backgroundColor: getMarkerColor(value),\n              width: '20px',\n              height: '20px',\n              borderRadius: '50%',\n            }}\n            title={`${cityMapping[city]}: ${value} μg/m³`}\n          ></div>\n        );\n      }\n\n      return null;\n    });\n  };\n\n  // 미세먼지 농도에 따른 마커 색상 결정\n  const getMarkerColor = (value) => {\n    if (value > 100) {\n      return 'red';\n    } else if (value > 50) {\n      return 'orange';\n    } else {\n      return 'green';\n    }\n  };\n\n  return (\n    <div className=\"dust-container\">\n      <header className=\"dust-header\">\n        <h1>TodayDust 페이지</h1>\n      </header>\n      <main className=\"dust-content\">\n        <p>오늘의 미세먼지</p>\n        <div className=\"map-container\" style={{ position: 'relative' }}>\n          <img\n            src=\"/path-to-your-map-image.jpg\"\n            alt=\"Map of Korea\"\n            style={{ width: '100%', height: 'auto' }}\n          />\n          {renderMarkers()}\n        </div>\n        <p>측정일시: {dustData.dataTime}</p>\n\n        <p>사용자 맞춤 분석</p>\n        <Link to=\"/analyze\">\n          <button className=\"AI-button\">AI 분석 페이지 이동</button>\n        </Link>\n      </main>\n      <Link to=\"/main\">\n        <button className=\"main-button\">Main</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default TodayDust;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}